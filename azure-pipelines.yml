variables:
  lldbBuildId: 2408
  lldbBuildProject: 'llvm'
  lldbBuildPipeline: 'lldb-build'
  rustcVersion: '1.89.0'
  cachePrefix: F
  AZP_CACHING_CONTENT_FORMAT: SingleTar
  AZP_CACHING_TAR: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    versionSuffix: ''
  ${{ else }}:
    versionSuffix: '-'

########################################################################################################################

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'

  strategy:
    matrix:
      x86_64:
        PlatformId: 'linux-x64'
        Triple: 'x86_64-linux-gnu'
        RustTarget: 'x86_64-unknown-linux-gnu'
        CrossBuilding: false
      arm:
        PlatformId: 'linux-armhf'
        Triple: 'arm-linux-gnueabihf'
        RustTarget: 'armv7-unknown-linux-gnueabihf'
        CrossBuilding: true
      aarch64:
        PlatformId: 'linux-arm64'
        Triple: 'aarch64-linux-gnu'
        RustTarget: 'aarch64-unknown-linux-gnu'
        CrossBuilding: true

  container:
    image: 'vadimcn/linux-builder:latest'
    options: --privileged

  steps:

  - script: |
      rustup self update
      rustup toolchain install $(rustcVersion)
      rustup default $(rustcVersion)
      rustup target add $(RustTarget)
      rustup show
    displayName: 'Install Rust'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: Cache@2
    inputs:
      key: '$(cachePrefix) | $(Triple) | node_modules | package-lock.json'
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - script: |
      mkdir build
      cd build
      cmake -DVERSION_SUFFIX=$(versionSuffix)\
            -DCMAKE_BUILD_TYPE=RelWithDebInfo\
            -DTEST_TIMEOUT=30000\
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip\
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchain-$(Triple).cmake\
            -DPLATFORM_ID=$(PlatformId)\
            -DCMAKE_SYSROOT=/stretch\
            ..
      cat CMakeCache.txt
    displayName: 'Configure'

  - script: |
      cmake --build build --target vsix_bootstrap
      cmake -E copy build/codelldb-bootstrap.vsix $(Build.ArtifactStagingDirectory)/codelldb-bootstrap.vsix
      cmake -E copy build/package.json $(Build.ArtifactStagingDirectory)/package.json
    displayName: 'Build bootstrap package'
    condition: not(eq(variables.CrossBuilding, 'true'))

  - script: |
      cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      /usr/bin/Xvfb :99 -screen 0 1024x768x24 &
      DISPLAY=:99.0 cmake --build build --target check
    displayName: 'Test'
    condition: not(eq(variables.CrossBuilding, 'true'))

  - script: |
      cd $(Agent.BuildDirectory)
      cat /proc/cpuinfo > system.log
      cat /proc/meminfo >> system.log
      env > env.log
      ls -laR $(Agent.BuildDirectory) > build-tree.log
      7zz a -tzip $(Agent.BuildDirectory)/$(Triple).zip -r "*.log" CMakeCache.txt
      echo "##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)/$(Triple).zip"
    displayName: 'Logs'
    condition: always()

########################################################################################################################

- job: OSX
  pool:
    vmImage: 'macOS-latest'

  strategy:
    matrix:
      x86_64:
        DeploymentTarget: '10.12'
        PlatformId: 'darwin-x64'
        Triple: 'x86_64-apple-darwin'
        RustTarget: 'x86_64-apple-darwin'
        CrossBuilding: false
      aarch64:
        DeploymentTarget: '11.0'
        PlatformId: 'darwin-arm64'
        Triple: 'aarch64-apple-darwin'
        RustTarget: 'aarch64-apple-darwin'
        CrossBuilding: true

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: Cache@2
    inputs:
      key: '$(cachePrefix) | $(Triple) | node_modules | package-lock.json'
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -v -y --profile minimal --default-toolchain none
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
      rustup toolchain install $(rustcVersion)
      rustup default $(rustcVersion)
      rustup target add $(RustTarget)
      rustup show
    displayName: 'Install Rust'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=$(DeploymentTarget)
      mkdir build
      cd build
      xcrun -sdk macosx cmake -DVERSION_SUFFIX=$(versionSuffix)\
            -DCMAKE_BUILD_TYPE=RelWithDebInfo\
            -DTEST_TIMEOUT=30000\
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip\
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchain-$(Triple).cmake\
            -DPLATFORM_ID=$(PlaformId)\
            ..
      cat CMakeCache.txt
    displayName: 'Configure'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=$(DeploymentTarget)
      xcrun -sdk macosx cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=$(DeploymentTarget)
      xcrun -sdk macosx cmake --build build --target check
    displayName: 'Test'
    condition: not(eq(variables.CrossBuilding, 'true'))

  - script: |
      cd $(Agent.BuildDirectory)
      sysctl -a > system.log
      env > env.log
      ls -laR $(Agent.BuildDirectory) > build-tree.log
      7z a -tzip $(Agent.BuildDirectory)/$(Triple).zip -r "*.log" CMakeCache.txt
      echo "##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)/$(Triple).zip"
    displayName: 'Logs'
    condition: always()

 ########################################################################################################################

- job: Windows
  pool:
    vmImage: 'windows-2022'

  variables:
    PlatformId: 'win32-x64'
    Triple: 'x86_64-windows-msvc'

  steps:

  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: specific
      project:  $(lldbBuildProject)
      pipeline: $(lldbBuildPipeline)
      buildId:  $(lldbBuildId)
      buildVersionToDownload: specific
      downloadType: single
      artifactName: 'lldb--$(Triple)'
      itemPattern: 'lldb--$(Triple)/lldb--$(Triple).zip'
      downloadPath: '$(Agent.BuildDirectory)/D'
    displayName: 'Download LLDB'

  - task: Cache@2
    inputs:
      key: '$(cachePrefix) | $(Triple) | node_modules | package-lock.json'
      path: $(Build.SourcesDirectory)/build/node_modules
      continueOnError: true
    displayName: Cache node_modules
    condition: always()

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
      arguments: -arch=amd64 -host_arch=amd64
      modifyEnvironment: true
    displayName: VsDevCmd

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -v -y --profile minimal --default-toolchain none
      echo "##vso[task.prependpath]%USERPROFILE%\.cargo\bin
      rustup toolchain install $(rustcVersion)-x86_64-pc-windows-gnu
      rustup default $(rustcVersion)-x86_64-pc-windows-gnu
      rustup target add x86_64-pc-windows-msvc
      rustup show
    displayName: 'Install Rust'

  - script: |
      mkdir build
      cd build
      cmake -GNinja^
            -DVERSION_SUFFIX=$(versionSuffix)^
            -DCMAKE_BUILD_TYPE=RelWithDebInfo^
            -DTEST_TIMEOUT=30000^
            -DLLDB_PACKAGE=$(Agent.BuildDirectory)/D/lldb--$(Triple)/lldb--$(Triple).zip^
            -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchain-x86_64-windows-msvc.cmake^
            -DPLATFORM_ID=$(PlatformId)^
            ..
      type CMakeCache.txt
    displayName: 'Configure'

  - script: |
      cmake --build build --target vsix_full
      cmake -E copy build/codelldb-full.vsix $(Build.ArtifactStagingDirectory)/codelldb-$(PlatformId).vsix
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'codelldb-$(PlatformId)'

  - script: |
      cmake --build build --target check
    displayName: 'Test'

  - script: |
      cd $(Agent.BuildDirectory)
      set > env.log
      ls -laR $(Agent.BuildDirectory) > build-tree.log
      wevtutil query-events System /c:100 /rd:true /f:text >wevt-System.log
      wevtutil query-events Application /c:100 /rd:true /f:text >wevt-Application.log
      7z a -tzip $(Agent.BuildDirectory)/$(Triple).zip -r "*.log" CMakeCache.txt
      echo ##vso[artifact.upload artifactname=logs;]$(Agent.BuildDirectory)\$(Triple).zip
    displayName: 'Logs'
    condition: always()
